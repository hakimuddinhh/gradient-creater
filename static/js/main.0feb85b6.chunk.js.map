{"version":3,"sources":["gradient-creator-logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","useState","colorList","setColorList","startColor","setStartColor","endColor","setEndColor","steps","setSteps","React","openInfo","setOpenInfo","openError","setOpenError","Alert","props","elevation","variant","handleCloseInfo","event","reason","handleCloseError","ShowGradients","className","map","color","style","backgroundColor","width","length","copyToClipboard","navigator","clipboard","writeText","ShowCode","TextField","value","Button","size","onClick","src","logo","name","defaultValue","onChange","type","id","label","e","currentTarget","CL","createGradient","Snackbar","open","autoHideDuration","onClose","severity","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gNAAe,MAA0B,kD,8EC6H1BA,MA9Gf,WAAgB,IAAD,EAEqBC,mBAAS,IAF9B,mBAENC,EAFM,KAEKC,EAFL,OAGuBF,mBAAS,WAHhC,mBAGNG,EAHM,KAGMC,EAHN,OAImBJ,mBAAS,WAJ5B,mBAINK,EAJM,KAIIC,EAJJ,OAKaN,mBAAS,IALtB,mBAKNO,EALM,KAKCC,EALD,OAMmBC,IAAMT,UAAS,GANlC,mBAMNU,EANM,KAMIC,EANJ,OAOqBF,IAAMT,UAAS,GAPpC,mBAONY,EAPM,KAOKC,EAPL,KAUb,SAASC,EAAMC,GACb,OAAO,cAAC,IAAD,aAAUC,UAAW,EAAGC,QAAQ,UAAaF,IAGtD,IAAMG,EAAkB,SAACC,EAAOC,GACf,cAAXA,GAIJT,GAAY,IAGRU,EAAmB,SAACF,EAAOC,GAChB,cAAXA,GAIJP,GAAa,IAYTS,EAAgB,kBAAM,qBAAKC,UAAU,qBAAf,SACzBtB,EAAYA,EAAUuB,KAAI,SAAAC,GAAK,OAC9B,qBAAKC,MAAO,CAAEC,gBAAiBF,EAAOG,MAAO,IAAM3B,EAAU4B,OAAS,UAAiB,QAIrFC,EAAkB,WACtBC,UAAUC,UAAUC,UAAUhC,GAC9BU,GAAY,IAGRuB,EAAW,kBAAM,sBAAKX,UAAU,YAAf,UAA2B,cAACY,EAAA,EAAD,CAAWC,MAAOnC,IAClE,cAACoC,EAAA,EAAD,CAAQC,KAAK,QAAQrB,QAAQ,WAAWsB,QAAST,EAAiBL,MAAM,UAAxE,sBAIF,OACE,gCACE,cAACH,EAAD,IACA,sBAAKC,UAAU,kBAAf,UACE,qBAAKiB,IAAKC,EAAMb,MAAO,MACvB,oDACA,cAAC,IAAD,CACEc,KAAK,cACLC,aAAcxC,EACdiC,MAAOjC,EACPyC,SAAU,SAAAnB,GAAK,OAAIrB,EAAcqB,MAGnC,cAAC,IAAD,CACEiB,KAAK,YACLC,aAActC,EACd+B,MAAO/B,EACPuC,SAAU,SAAAnB,GAAK,OAAInB,EAAYmB,MAGjC,cAACU,EAAA,EAAD,CAAWU,KAAK,SAASC,GAAG,iBAC1BH,aAAcpC,EAEdwC,MAAM,QACNH,SAAU,SAAAI,GAAC,OAAIxC,EAASwC,EAAEC,cAAcb,UAE1C,cAACC,EAAA,EAAD,CAAQpB,QAAQ,YAAYsB,QAnDV,WACtB,IAAMW,EAAKC,YAAehD,EAAYE,EAAUE,GAC5C2C,EACFhD,EAAagD,GAEbrC,GAAa,IA8C2CY,MAAM,UAA5D,6BAGCxB,EAAU4B,OAAS,GAAK,cAACK,EAAD,OAI3B,cAACZ,EAAD,IACA,cAAC8B,EAAA,EAAD,CAAUC,KAAM3C,EAAU4C,iBAAkB,IAAMC,QAASrC,EAA3D,SACE,cAACJ,EAAD,CAAOyC,QAASrC,EAAiBsC,SAAS,OAA1C,qCAOF,cAACJ,EAAA,EAAD,CAAUC,KAAMzC,EAAW0C,iBAAkB,IAAMC,QAASlC,EAA5D,SAEE,cAACP,EAAD,CAAOyC,QAASlC,EAAkBmC,SAAS,QAA3C,sCCtGOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0feb85b6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/gradient-creator-logo.4aa4c7fd.svg\";","import logo from './gradient-creator-logo.svg';\nimport React, { useState } from 'react';\nimport './App.css';\nimport { createGradient } from 'gradient-creator';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\n\nimport ColorPicker from 'material-ui-color-picker';\n\n\n\n\n\nfunction App() {\n\n  const [colorList, setColorList] = useState([]);\n  const [startColor, setStartColor] = useState('#ff0000');\n  const [endColor, setEndColor] = useState('#f7941d');\n  const [steps, setSteps] = useState(10);\n  const [openInfo, setOpenInfo] = React.useState(false);\n  const [openError, setOpenError] = React.useState(false);\n\n\n  function Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n  }\n\n  const handleCloseInfo = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpenInfo(false);\n  };\n\n  const handleCloseError = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpenError(false);\n  };\n\n  const handleColorList = () => {\n    const CL = createGradient(startColor, endColor, steps);\n    if (CL) {\n      setColorList(CL);\n    } else {\n      setOpenError(true);\n    }\n  }\n\n  const ShowGradients = () => <div className=\"gradient-container\">\n    {colorList ? colorList.map(color =>\n      <div style={{ backgroundColor: color, width: 100 / colorList.length + '%' }}></div>) : null\n    }\n  </div>;\n\n  const copyToClipboard = () => {\n    navigator.clipboard.writeText(colorList)\n    setOpenInfo(true);\n  }\n\n  const ShowCode = () => <div className=\"show-code\"><TextField value={colorList} />\n    <Button size=\"small\" variant=\"outlined\" onClick={copyToClipboard} color=\"primary\">\n      Copy\n    </Button></div>;\n\n  return (\n    <div>\n      <ShowGradients />\n      <div className=\"Field-container\">\n        <img src={logo} width={100} />\n        <h2> Gradient Creator </h2>\n        <ColorPicker\n          name='Start Color'\n          defaultValue={startColor}\n          value={startColor}\n          onChange={color => setStartColor(color)}\n\n        />\n        <ColorPicker\n          name='End Color'\n          defaultValue={endColor}\n          value={endColor}\n          onChange={color => setEndColor(color)}\n\n        />\n        <TextField type=\"number\" id=\"standard-basic\"\n          defaultValue={steps}\n          // value={steps}\n          label=\"Steps\"\n          onChange={e => setSteps(e.currentTarget.value)}\n        />\n        <Button variant=\"contained\" onClick={handleColorList} color=\"primary\">\n          Create Gradient\n        </Button>\n        {colorList.length > 0 && <ShowCode />}\n\n      </div>\n\n      <ShowGradients />\n      <Snackbar open={openInfo} autoHideDuration={2000} onClose={handleCloseInfo}>\n        <Alert onClose={handleCloseInfo} severity=\"info\">\n          Copied to Clipboard !\n        </Alert>\n\n\n      </Snackbar>\n\n      <Snackbar open={openError} autoHideDuration={2000} onClose={handleCloseError}>\n\n        <Alert onClose={handleCloseError} severity=\"error\">\n          Invalid HEX code !\n        </Alert>\n      </Snackbar>\n\n\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}