{"version":3,"sources":["gradient-creator-logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","useState","colorList","setColorList","startColor","setStartColor","endColor","setEndColor","steps","setSteps","ShowGradients","className","map","color","style","backgroundColor","width","length","src","logo","name","defaultValue","value","onChange","TextField","type","id","label","e","currentTarget","Button","variant","onClick","CL","createGradient","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sMAAe,MAA0B,kD,6DCoE1BA,MAxDf,WAAgB,IAAD,EAEqBC,mBAAS,IAF9B,mBAENC,EAFM,KAEKC,EAFL,OAGuBF,mBAAS,WAHhC,mBAGNG,EAHM,KAGMC,EAHN,OAImBJ,mBAAS,WAJ5B,mBAINK,EAJM,KAIIC,EAJJ,OAKaN,mBAAS,IALtB,mBAKNO,EALM,KAKCC,EALD,KAYPC,EAAgB,kBAAM,qBAAKC,UAAU,qBAAf,SACzBT,EAAYA,EAAUU,KAAI,SAAAC,GAAK,OAC9B,qBAAKC,MAAO,CAAEC,gBAAiBF,EAAOG,MAAO,IAAMd,EAAUe,OAAS,UAAiB,QAI3F,OACE,gCACE,cAACP,EAAD,IACA,sBAAKC,UAAU,kBAAf,UACE,qBAAKO,IAAKC,EAAMH,MAAO,MACvB,oDACA,cAAC,IAAD,CACEI,KAAK,cACLC,aAAcjB,EACdkB,MAAOlB,EACPmB,SAAU,SAAAV,GAAK,OAAIR,EAAcQ,MAGnC,cAAC,IAAD,CACEO,KAAK,YACLC,aAAcf,EACdgB,MAAOhB,EACPiB,SAAU,SAAAV,GAAK,OAAIN,EAAYM,MAGjC,cAACW,EAAA,EAAD,CAAWC,KAAK,SAASC,GAAG,iBAC1BL,aAAcb,EAEdmB,MAAM,QACNJ,SAAU,SAAAK,GAAC,OAAInB,EAASmB,EAAEC,cAAcP,UAE1C,cAACQ,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QArCV,WACtB,IAAMC,EAAKC,YAAe9B,EAAYE,EAAUE,GAChDL,EAAa8B,IAmC6CpB,MAAM,UAA5D,gCAIF,cAACH,EAAD,QChDSyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.997f7c89.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/gradient-creator-logo.4aa4c7fd.svg\";","import logo from './gradient-creator-logo.svg';\nimport { useState } from 'react';\nimport './App.css';\nimport { createGradient } from 'gradient-creator';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport ColorPicker from 'material-ui-color-picker';\n\n\n\n\n\nfunction App() {\n\n  const [colorList, setColorList] = useState([]);\n  const [startColor, setStartColor] = useState('#ff0000');\n  const [endColor, setEndColor] = useState('#f7941d');\n  const [steps, setSteps] = useState(10);\n\n  const handleColorList = () => {\n    const CL = createGradient(startColor, endColor, steps);\n    setColorList(CL);\n  }\n\n  const ShowGradients = () => <div className=\"gradient-container\">\n    {colorList ? colorList.map(color =>\n      <div style={{ backgroundColor: color, width: 100 / colorList.length + '%' }}></div>) : null\n    }\n  </div>;\n\n  return (\n    <div>\n      <ShowGradients />\n      <div className=\"Field-container\">\n        <img src={logo} width={100}/>\n        <h2> Gradient Creator </h2>\n        <ColorPicker\n          name='Start Color'\n          defaultValue={startColor}\n          value={startColor}\n          onChange={color => setStartColor(color)}\n\n        />\n        <ColorPicker\n          name='End Color'\n          defaultValue={endColor}\n          value={endColor}\n          onChange={color => setEndColor(color)}\n\n        />\n        <TextField type=\"number\" id=\"standard-basic\"\n          defaultValue={steps}\n          // value={steps}\n          label=\"Steps\"\n          onChange={e => setSteps(e.currentTarget.value)}\n        />\n        <Button variant=\"contained\" onClick={handleColorList} color=\"primary\">\n          Create Gradient\n        </Button>\n      </div>\n      <ShowGradients />\n\n\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}